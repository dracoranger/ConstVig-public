[dad]
rounds = 100
round_length = 300
path =
death_limit = 3
time_between_check = 5
log_file = main.log
child_num = 2
0 = 0

[NetworkIn]
#premade sql queries are as follows

        #searchsqlflowsportin('port as string',getcur()) - shows flows matching port in

        #searchsqlflowsportout('port as string',getcur()) - shows flows matching port out

        #searchsqlflowsflags('minimun number of flags as string',getcur()) - finds flows that have a minimum number of flags

        #searchsqlportinwithflags('port as string',getcur()) - shows flows that have flags present given the port in

        #searchsqlportoutwithflags('port as string',getcur()) - shows flows that have flags present given the port out

        #searchsql(inp,cur) - generalized search function on sql.  feeds query directly to database, so needs to be a valid sql query =
pcapfolder = C:\Users\T\Documents\GitHub\ConstVig\put_pcaps_here

[NetworkOut]
#the range of ips that should be targeted should be in the format xxx.xxx.xxx.xxx/xx with the first ip and the subnet mask

        #separate the ports to be attacked with a ,

        #both paths are defaults, it grabs the current working directory when it is run, then appends chaff and attack. =
iprange = 192.168.1.0/31
ports = 23
submit_flag_ip = 192.168.1.1
submit_flag_port = 9001
path_chaff = C:\Users\T\Documents\GitHub\ConstVig\Code\chaff
path_attack = C:\Users\T\Documents\GitHub\ConstVig\Code\attacks

[Attacks]
#format should be the file name followed by the command line argument to run it.

        #store the attacks in the path_attack directory
#add -i to have it iterate through the items in iprange

        #add -p to iterate through the ports
#add -f to add the ip address and port of where the flag should be submitted in the format submit_flag_ip + ' ' + submit_flag_port =
hello_world.py = python hello_world.py
#failure.py = python failure.py
flag.py = python flag.py -f
ip.py = python ip.py -ip
port.py = python port.py -p
both.py = python both.py -ip -p

[Chaff]
#format should be the file name followed by the command line argument to run it.
#store the chaff in the path_chaff directory

        #add -i to have it iterate through the items in iprange
#add -p to iterate through the ports

        #add -f to add the ip address and port of where the flag should be submitted in the format submit_flag_ip + ' ' + submit_flag_port =
